input { 
    kafka {
        bootstrap_servers => ["172.16.20.37:9092"]
        topics => ["ip-tcp-http"]
    }
}

filter {
	if [topics] == ["ip-tcp-http"] 
	{
		csv {
			columns => [
				"timestamp",
				"indice",
				"protocolo",
				"frame_time_epoch",
				"ip_src",
				"ip_proto",
				"ip_id",
				"ip_ttl",
				"ip_version",
				"ip_dsfield_dscp",
				"ip_dsfield_ecn",
				"ip_flags_mf",
				"ip_hdr_len",
				"ip_checksum",
				"ip_checksum_status",
				"ip_flags",
				"ip_dsfield",
				"ip_flags_df",
				"ip_len",
				"ip_frag_offset",
				"ip_flags_rb",
				"ip_dst",
				"tcp_ack",
				"tcp_analysis",
				"tcp_analysis_ack_rtt",
				"tcp_analysis_acks_frame",
				"tcp_analysis_bytes_in_flight",
				"tcp_analysis_initial_rtt",
				"tcp_analysis_push_bytes_sent",
				"tcp_checksum",
				"tcp_checksum_status",
				"tcp_dstport",
				"tcp_flags",
				"tcp_flags_ack",
				"tcp_flags_cwr",
				"tcp_flags_ecn",
				"tcp_flags_fin",
				"tcp_flags_ns",
				"tcp_flags_push",
				"tcp_flags_res",
				"tcp_flags_reset",
				"tcp_flags_str",
				"tcp_flags_syn",
				"tcp_flags_urg",
				"tcp_hdr_len",
				"tcp_len",
				"tcp_nxtseq",
				"tcp_option_kind",
				"tcp_option_len",
				"tcp_options",
				"tcp_options_mss",
				"tcp_options_mss_val",
				"tcp_options_sack_perm",
				"tcp_options_timestamp_tsecr",
				"tcp_options_timestamp_tsval",
				"tcp_options_type",
				"tcp_options_type_class",
				"tcp_options_type_copy",
				"tcp_options_type_number",
				"tcp_options_wscale_multiplier",
				"tcp_port",
				"tcp_seq",
				"tcp_srcport",
				"tcp_stream",
				"tcp_urgent_pointer",
				"tcp_window_size",
				"tcp_window_size_scalefactor",
				"tcp_window_size_value",
				"http_connection",
				"http_content_encoding",
				"http_content_length",
				"http_content_length_header",
				"http_date",
				"http_host",
				"http_referer",
				"http_request",
				"http_request_full_uri",
				"http_request_method",
				"http_request_uri",
				"http_request_version",
				"http_request_in",
				"http_request_number",
				"http_response",
				"http_response_code",
				"http_response_phrase",
				"http_response_in",
				"http_response_number",
				"http_server",
				"http_time",
				"http_upgrade",
				"http_user_agent"
			]
			skip_empty_columns => true
			separator => ";"
		}
		
		################################# Atribuindo data original ao pacote #########################################
		date {
			match => ["timestamp", "ISO8601"]
		}
		
		################################ Verificacao da existencia dos campos ########################################

		if [indice] {
			mutate { add_field => { "[@metadata][indice]" => "%{indice}" } }
			#mutate { remove_field => ["indice"] } 
		}
		if [frame_time_epoch] {
			mutate { split => ["frame_time_epoch", ","] }
			mutate { convert => ["frame_time_epoch", "float"] }
		}
		if [ip_src] {
			mutate { split => ["ip_src", ","] }
		}
		if [ip_proto] {
			mutate { split => ["ip_proto", ","]	}
			mutate { convert => ["ip_proto", "integer"]	}
		}
		if [ip_ttl] {
			mutate { split => ["ip_ttl", ","] }
			mutate { convert => ["ip_ttl", "integer"]}
		}
		if [ip_version] {
			mutate { split => ["ip_version", ","] }
			mutate { convert => ["ip_version", "integer"]}
		}
		if [ip_dnsfield_dscp] {
			mutate { split => ["ip_dsfield_dscp", ","] }
			mutate { convert => ["ip_dsfield_dscp", "integer"]}
		}
		if [ip_dsfield_ecn] {
			mutate { split => ["ip_dsfield_ecn", ","] }
			mutate { convert => ["ip_dsfield_ecn", "integer"]}
		}
		if [ip_id] {
			mutate { split => ["ip_id", ","] }
		}
		if [ip_flags_mf] {
			mutate { split => ["ip_flags_mf", ","] }
			mutate { convert => ["ip_flags_mf", "integer"]}
		}
		if [ip_hdr_len] {
			mutate { split => ["ip_hdr_len", ","] }
			mutate { convert => ["ip_hdr_len", "integer"]}
		}
		if [ip_checksum] {
			mutate { split => ["ip_checksum", ","] }
		}
		if [ip_checksum_status] {
			mutate { split => ["ip_checksum_status", ","] }
			mutate { convert => ["ip_checksum_status", "integer"]}
		}
		if [ip_flags] {
			mutate { split => ["ip_flags", ","] }
		}
		if [ip_dsfield] {
			mutate { split => ["ip_dsfield", ","] }
		}
		if [ip_flags_df] {
			mutate { split => ["ip_flags_df", ","] }
			mutate { convert => ["ip_flags_df", "integer"]}
		}
		if [ip_len] {
			mutate { split => ["ip_len", ","] }
			mutate { convert => ["ip_len", "integer"]}
		}
		if [ip_frag_offset] {
			mutate { split => ["ip_frag_offset", ","] }
			mutate { convert => ["ip_flag_offset", "integer"]}
		}
		if [ip_flags_rb] {
			mutate { split => ["ip_flags_rb", ","] }
			mutate { convert => ["ip_flags_rb", "integer"]}
		}
		if [ip_dst] {
			mutate { split => ["ip_dst", ","] }
		}
		if [tcp_ack] {
			mutate { split => ["tcp_ack", ","] }
			mutate { convert => ["tcp_ack", "integer"]}
		}
		if [tcp_analysis] {
			mutate { split => ["tcp_analysis", ","] }
			mutate { convert => ["tcp_analysis", "integer"]}
		}
		if [tcp_analysis_ack_rtt] {
			mutate { split => ["tcp_analysis_ack_rtt", ","] }
			mutate { convert => ["tcp_analysis_ack_rtt", "float"]}
		}
		if [tcp_analysis_acks_frame] {
			mutate { split => ["tcp_analysis_acks_frame", ","] }
			mutate { convert => ["tcp_analysis_ack_rtt", "integer"]}
		}
		if [tcp_analysis_bytes_in_flight] {
			mutate { split => ["tcp_analysis_bytes_in_flight", ","] }
			mutate { convert => ["tcp_analysis_bytes_in_flight", "integer"]}
		}
		if [tcp_analysis_initial_rtt] {
			mutate { split => ["tcp_analysis_initial_rtt", ","] }
			mutate { convert => ["tcp_analysis_initial_rtt", "float"]}
		}
		if [tcp_analysis_push_bytes_sent] {
			mutate { split => ["tcp_analysis_push_bytes_sent", ","] }
			mutate { convert => ["tcp_analysis_push_bytes_sent", "integer"]}
		}
		if [tcp_checksum] {
			mutate { split => ["tcp_checksum", ","] }
		}
		if [tcp_checksum_status] {
			mutate { split => ["tcp_checksum_status", ","] }
			mutate { convert => ["tcp_checksum_status", "integer"]}
		}
		if [tcp_dstport] {
			mutate { split => ["tcp_dstport", ","] }
			mutate { convert => ["tcp_dstport", "integer"]}
		}
		if [tcp_flags] {
			mutate { split => ["tcp_flags", ","] }
		}
		if [tcp_flags_ack] {
			mutate { split => ["tcp_flags_ack", ","] }
			mutate { convert => ["tcp_flags_ack", "integer"]}
		}
		if [tcp_flags_cwr] {
			mutate { split => ["tcp_flags_cwr", ","] }
			mutate { convert => ["tcp_flags_cwr", "integer"]}
		}
		if [tcp_flags_ecn] {
			mutate { split => ["tcp_flags_ecn", ","] }
			mutate { convert => ["tcp_flags_ecn", "integer"]}
		}
		if [tcp_flags_fin] {
			mutate { split => ["tcp_flags_fin", ","] }
			mutate { convert => ["tcp_flags_fin", "integer"]}
		}
		if [tcp_flags_ns] {
			mutate { split => ["tcp_flags_ns", ","] }
			mutate { convert => ["tcp_flags_ns", "integer"]}
		}
		if [tcp_flags_push] {
			mutate { split => ["tcp_flags_push", ","] }
			mutate { convert => ["tcp_flags_push", "integer"]}
		}
		if [tcp_flags_reset] {
			mutate { split => ["tcp_flags_reset", ","] }
			mutate { convert => ["tcp_flags_reset", "integer"]}
		}
		if [tcp_flags_str] {
			mutate { split => ["tcp_flags_str", ","] }
		}
		if [tcp_flags_syn] {
			mutate { split => ["tcp_flags_syn", ","] }
			mutate { convert => ["tcp_flags_syn", "integer"]}
		}
		if [tcp_flags_urg] {
			mutate { split => ["tcp_flags_urg", ","] }
			mutate { convert => ["tcp_flags_urg", "integer"]}
		}
		if [tcp_hdr_len] {
			mutate { split => ["tcp_hdr_len", ","] }
			mutate { convert => ["tcp_hdr_len", "integer"]}
		}
		if [tcp_len] {
			mutate { split => ["tcp_len", ","] }
			mutate { convert => ["tcp_len", "integer"]}
		}
		if [tcp_nxtseq] {
			mutate { split => ["tcp_nxtseq", ","] }
			mutate { convert => ["tcp_nxtseq", "integer"]}
		}
		if [tcp_option_kind] {
			mutate { split => ["tcp_option_kind", ","] }
			mutate { convert => ["tcp_option_kind", "integer"]}
		}
		if [tcp_option_len] {
			mutate { split => ["tcp_option_len", ","] }
			mutate { convert => ["tcp_option_len", "integer"]}
		}
		if [tcp_options] {
			mutate { split => ["tcp_options", ","] }
		}
		if [tcp_options_mss] {
			mutate { split => ["tcp_options_mss", ","] }
			mutate { convert => ["tcp_options_mss", "integer"]}
		}
		if [tcp_options_mss_val] {
			mutate { split => ["tcp_options_mss_val", ","] }
			mutate { convert => ["tcp_options_mss_val", "integer"]}
		}
		if [tcp_options_sack_perm] {
			mutate { split => ["tcp_options_sack_perm", ","] }
			mutate { convert => ["tcp_options_sack_perm", "integer"]}
		}
		if [tcp_options_timestamp_tsecr] {
			mutate { split => ["tcp_options_timestamp_tsecr", ","] }
			mutate { convert => ["tcp_options_timestamp_tsecr", "integer"]}
		}
		if [tcp_options_timestamp_tsval] {
			mutate { split => ["tcp_options_timestamp_tsval", ","] }
			mutate { convert => ["tcp_options_timestamp_tsval", "integer"]}
		}
		if [tcp_options_type] {
			mutate { split => ["tcp_options_type", ","] }
			mutate { convert => ["tcp_options_type", "integer"]}
		}
		if [tcp_options_type_class] {
			mutate { split => ["tcp_options_type_class", ","] }
			mutate { convert => ["tcp_options_type_class", "integer"]}
		}
		if [tcp_options_type_copy] {
			mutate { split => ["tcp_options_type_copy", ","] }
			mutate { convert => ["tcp_options_type_copy", "integer"]}
		}
		if [tcp_options_type_number] {
			mutate { split => ["tcp_options_type_number", ","] }
			mutate { convert => ["tcp_options_type_number", "integer"]}
		}
		if [tcp_options_wscale_multiplier] {
			mutate { split => ["tcp_options_wscale_multiplier", ","] }
			mutate { convert => ["tcp_options_wscale_multiplier", "integer"]}
		}
		if [tcp_port] {
			mutate { split => ["tcp_port", ","] }
			mutate { convert => ["tcp_port", "integer"]}
		}
		if [tcp_seq] {
			mutate { split => ["tcp_seq", ","] }
			mutate { convert => ["tcp_seq", "integer"]}
		}
		if [tcp_srcport] {
			mutate { split => ["tcp_srcport", ","] }
			mutate { convert => ["tcp_srcport", "integer"]}
		}
		if [tcp_stream] {
			mutate { split => ["tcp_stream", ","] }
			mutate { convert => ["tcp_stream", "integer"]}
		}
		if [tcp_urgent_pointer] {
			mutate { split => ["tcp_urgent_pointer", ","] }
			mutate { convert => ["tcp_urgent_pointer", "integer"]}
		}
		if [tcp_window_size] {
			mutate { split => ["tcp_window_size", ","] }
			mutate { convert => ["tcp_window_size", "integer"]}
		}
		if [tcp_window_size_scalefactor] {
			mutate { split => ["tcp_window_size_scalefactor", ","] }
			mutate { convert => ["tcp_window_size_scalefactor", "integer"]}
		}
		if [tcp_window_size_value] {
			mutate { split => ["tcp_window_size_value", ","] }
			mutate { convert => ["tcp_window_size_value", "integer"]}
		}
		if [http_connection] {
			mutate { split => ["http_connection", ","] }
		}
		if [http_content_encoding] {
			mutate { split => ["http_content_encoding", ","] }
		}
		if [http_content_length] {
			mutate { split => ["http_content_length", ","] }
		}
		if [http_content_length_header] {
			mutate { split => ["http_content_length_header", ","] }
		}
		if [http_date] {
			mutate { split => ["http_date", ","] }
		}
		if [http_host] {
			mutate { split => ["http_host", ","] }
		}
		if [http_referer] {
			mutate { split => ["http_referer", ","] }
		}
		if [http_request] {
			mutate { split => ["http_request", ","] }
		}
		if [http_request_full_uri] {
			mutate { split => ["http_request_full_uri", ","] }
		}
		if [http_request_method] {
			mutate { split => ["http_request_method", ","] }
		}
		if [http_request_uri] {
			mutate { split => ["http_request_uri", ","] }
		}
		if [http_request_version] {
			mutate { split => ["http_request_version", ","] }
		}
		if [http_request_in] {
			mutate { split => ["http_request_in", ","] }
		}
		if [http_request_number] {
			mutate { split => ["http_request_number", ","] }
		}
		if [http_response] {
			mutate { split => ["http_response", ","] }
		}
		if [http_response_code] {
			mutate { split => ["http_response_code", ","] }
		}
		if [http_response_phrase] {
			mutate { split => ["http_response_phrase", ","] }
		}
		if [http_response_in] {
			mutate { split => ["http_response_in", ","] }
		}
		if [http_response_number] {
			mutate { split => ["http_response_number", ","] }
		}
		if [http_server] {
			mutate { split => ["http_server", ","] }
		}
		if [http_time] {
			mutate { split => ["http_time", ","] }
		}
		if [http_upgrade] {
			mutate { split => ["http_upgrade", ","] }
		}
		if [http_user_agent] {
			mutate { split => ["http_user_agent", ","] }
		}
		
		if [http_] {
			mutate { split => ["http_", ","] }
		}
		
		####################################### Verificacao dos GEOIPs ###############################################
		if !("172.30.20" in [ip_src]) { 
			geoip { source => "ip_src" target => "geoip_ip_src" }
		}
		if !("172.30.20" in [ip_dst]) {
			geoip {	source => "ip_dst" target => "geoip_ip_dst"	}
		}
		if !("172.30.20" in [http_host]) {
			geoip { source => "ip_dst" target => "geoip_http_src"}
		}
	}
}

output {   
	if [topics] == ["ip-tcp-http"]
	{
		 file {
        path => "/tmp/testekafka.json"
		}
		elasticsearch {
			hosts => ["localhost:9200"]
			index => "kafka-ultimoteste-%{[@metadata][indice]}"
		} 
	}
}
