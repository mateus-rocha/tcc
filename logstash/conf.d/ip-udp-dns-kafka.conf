input { 
    kafka {
        bootstrap_servers => ["172.16.20.37:9092"]
        topics => ["ip-udp-dns"]
    }
}

filter {
	if [topics] == ["ip-udp-dns"]
	{
		csv {
			columns => [
				"timestamp",
				"indice",
				"protocolo",
				"frame_time_epoch",
				"ip_src",
				"ip_proto",
				"ip_ttl",
				"ip_version",
				"ip_dsfield_dscp",
				"ip_dsfield_ecn",
				"ip_id",
				"ip_flags_mf",
				"ip_hdr_len",
				"ip_checksum",
				"ip_checksum_status",
				"ip_flags",
				"ip_dsfield",
				"ip_flags_df",
				"ip_len",
				"ip_frag_offset",
				"ip_flags_rb",
				"ip_dst",
				"dp_checksum",
				"udp_checksum_status",
				"udp_dstport",
				"udp_length",
				"udp_port",
				"udp_srcport",
				"udp_stream",
				"dns_a",
				"dns_aaaa",
				"dns_cname",
				"dns_count_add_rr",
				"dns_count_answers",
				"dns_count_auth_rr",
				"dns_count_labels",
				"dns_count_queries",
				"dns_dnskey_algorithm",
				"dns_dnskey_flags",
				"dns_dnskey_flags_key_revoked",
				"dns_dnskey_flags_reserved",
				"dns_dnskey_flags_secure_entry_point",
				"dns_dnskey_flags_zone_key",
				"dns_dnskey_key_id",
				"dns_dnskey_protocol",
				"dns_ds_algorithm",
				"dns_ds_digest_type",
				"dns_ds_key_id",
				"dns_flags",
				"dns_flags_authenticated",
				"dns_flags_authoritative",
				"dns_flags_checkdisable",
				"dns_flags_opcode",
				"dns_flags_rcode",
				"dns_flags_recavail",
				"dns_flags_recdesired",
				"dns_flags_response",
				"dns_flags_truncated",
				"dns_flags_z",
				"dns_id",
				"dns_ns",
				"dns_ptr_domain_name",
				"dns_qry_class",
				"dns_qry_name",
				"dns_qry_name_len",
				"dns_qry_type",
				"dns_resp_class",
				"dns_resp_edns0_version",
				"dns_resp_ext_rcode",
				"dns_resp_len",
				"dns_resp_name",
				"dns_resp_ttl",
				"dns_resp_type",
				"dns_resp_z",
				"dns_resp_z_do",
				"dns_resp_z_reserved",
				"dns_response_to",
				"dns_rr_udp_payload_size",
				"dns_rrsig_algorithm",
				"dns_rrsig_key_tag",
				"dns_rrsig_labels",
				"dns_rrsig_original_ttl",
				"dns_rrsig_signature_expiration",
				"dns_rrsig_signature_inception",
				"dns_rrsig_signers_name",
				"dns_rrsig_type_covered",
				"dns_soa_expire_limit",
				"dns_soa_mininum_ttl",
				"dns_soa_mname",
				"dns_soa_refresh_interval",
				"dns_soa_retry_interval",
				"dns_soa_rname",
				"dns_soa_serial_number",
				"dns_time"
			]
			skip_empty_columns => true
			separator => ";"
		}
		
		################################# Atribuindo data original ao pacote #########################################
		date {
			match => ["timestamp", "ISO8601"]
		}
		
		################################ Verificacao da existencia dos campos ########################################

		if [indice] {
			mutate { add_field => { "[@metadata][indice]" => "%{indice}" }}
			mutate { remove_field => ["indice"]} 
		}
		if [frame_time_epoch] {
			mutate { split => ["frame_time_epoch", ","] }
			mutate { convert => ["frame_time_epoch", "float"] }
		}
		if [ip_src] {
			mutate { split => ["ip_src", ","] }
		}
		if [ip_proto] {
			mutate { split => ["ip_proto", ","]	}
			mutate { convert => ["ip_proto", "integer"]	}
		}
		if [ip_ttl] {
			mutate { split => ["ip_ttl", ","] }
			mutate { convert => ["ip_ttl", "integer"]}
		}
		if [ip_version] {
			mutate { split => ["ip_version", ","] }
			mutate { convert => ["ip_version", "integer"]}
		}
		if [ip_dnsfield_dscp] {
			mutate { split => ["ip_dsfield_dscp", ","] }
			mutate { convert => ["ip_dsfield_dscp", "integer"]}
		}
		if [ip_dsfield_ecn] {
			mutate { split => ["ip_dsfield_ecn", ","] }
			mutate { convert => ["ip_dsfield_ecn", "integer"]}
		}
		if [ip_id] {
			mutate { split => ["ip_id", ","] }
		}
		if [ip_flags_mf] {
			mutate { split => ["ip_flags_mf", ","] }
			mutate { convert => ["ip_flags_mf", "integer"]}
		}
		if [ip_hdr_len] {
			mutate { split => ["ip_hdr_len", ","] }
			mutate { convert => ["ip_hdr_len", "integer"]}
		}
		if [ip_checksum] {
			mutate { split => ["ip_checksum", ","] }
		}
		if [ip_checksum_status] {
			mutate { split => ["ip_checksum_status", ","] }
			mutate { convert => ["ip_checksum_status", "integer"]}
		}
		if [ip_flags] {
			mutate { split => ["ip_flags", ","] }
		}
		if [ip_dsfield] {
			mutate { split => ["ip_dsfield", ","] }
		}
		if [ip_flags_df] {
			mutate { split => ["ip_flags_df", ","] }
			mutate { convert => ["ip_flags_df", "integer"]}
		}
		if [ip_len] {
			mutate { split => ["ip_len", ","] }
			mutate { convert => ["ip_len", "integer"]}
		}
		if [ip_frag_offset] {
			mutate { split => ["ip_frag_offset", ","] }
			mutate { convert => ["ip_flag_offset", "integer"]}
		}
		if [ip_flags_rb] {
			mutate { split => ["ip_flags_rb", ","] }
			mutate { convert => ["ip_flags_rb", "integer"]}
		}
		if [ip_dst] {
			mutate { split => ["ip_dst", ","] }
		}
		if [udp_checksum] {
			mutate { split => ["udp_checksum", ","] }
		}
		if [udp_checksum_status] {
			mutate { split => ["udp_checksum_status", ","] }
			mutate { convert => ["udp_checksum_status", "integer"]}
		}
		if [udp_dstport] {
			mutate { split => ["udp_dstport", ","] }
			mutate { convert => ["udp_dstport", "integer"] }
		}
		if [udp_length] {
			mutate { split => ["udp_length", ","] } 
			mutate { convert => ["udp_length", "integer"] }
		}
		if [udp_port] {
			mutate { split => ["udp_port", ","] }
			mutate { convert => ["udp_port", "integer"]}
		}
		if [udp_srcport] {
			mutate { split => ["udp_srcport", ","] }
			mutate { convert => ["udp_srcport", "integer"]}
		}
		if [udp_stream] {
			mutate { split => ["udp_stream", ","] }
			mutate { convert => ["udp_stream", "integer"]}
		}
		if [dns_a] {
			mutate { split => ["dns_a", ","] }
		}
		if [dns_aaaa] {
			mutate { split => ["dns_aaaa", ","] }
		}
		if [dns_cname] {
			mutate { split => ["dns_cname", ","] }
		}
		if [dns_count_add_rr] {
			mutate { split => ["dns_count_add_rr", ","] }
			mutate { convert => ["dns_count_add_rr", "integer"]}
		}
		if [dns_count_answers] {
			mutate { split => ["dns_count_answers", ","] }
			mutate { convert => ["dns_count_answers", "integer"]}
		}
		if [dns_count_auth_rr] {
			mutate { split => ["dns_count_auth_rr", ","] }
			mutate { convert => ["dns_count_auth_rr", "integer"]}
		}
		if [dns_count_labels] {
			mutate { split => ["dns_count_labels", ","] }
			mutate { convert => ["dns_count_labels", "integer"]}
		}
		if [dns_count_queries] {
			mutate { split => ["dns_count_queries", ","] }
			mutate { convert => ["dns_count_queries", "integer"]}
		}
		if [dns_dnskey_algorithm] {
			mutate { split => ["dns_dnskey_algorithm", ","] }
			mutate { convert => ["dns_dnskey_algorithm", "integer"]}
		}
		if [dns_dnskey_flags] {
			mutate { split => ["dns_dnskey_flags", ","] }
		}
		if [dns_dnskey_flags_key_revoked] {
			mutate { split => ["dns_dnskey_flags_key_revoked", ","] }
			mutate { convert => ["dns_dnskey_flags_key_revoked", "integer"]}
		}
		if [dns_dnskey_flags_reserved] {
			mutate { split => ["dns_dnskey_flags_reserved", ","] }
		}
		if [dns_dnskey_flags_secure_entry_point] {
			mutate { split => ["dns_dnskey_flags_secure_entry_point", ","] }
			mutate { convert => ["dns_dnskey_flags_secure_entry_point", "integer"]}
		}
		if [dns_dnskey_flags_zone_key] {
			mutate { split => ["dns_dnskey_flags_zone_key", ","] }
			mutate { convert => ["dns_dnskey_flags_zone_key", "integer"]}
		}
		if [dns_dnskey_key_id] {
			mutate { split => ["dns_dnskey_key_id", ","] }
			mutate { convert => ["dns_dnskey_key_id", "integer"]}
		}
		if [dns_dnskey_protocol] {
			mutate { split => ["dns_dnskey_protocol", ","] }
			mutate { convert => ["dns_dnskey_protocol", "integer"]}
		}
		if [dns_ds_algorithm] {
			mutate { split => ["dns_ds_algorithm", ","] }
			mutate { convert => ["dns_ds_algorithm", "integer"]}
		}
		if [dns_ds_digest_type] {
			mutate { split => ["dns_ds_digest_type", ","] }
			mutate { convert => ["dns_ds_digest_type", "integer"]}
		}
		if [dns_ds_key_id] {
			mutate { split => ["dns_ds_key_id", ","] }
		}
		if [dns_flags] {
			mutate { split => ["dns_flags", ","] }
		}
		if [dns_flags_authenticated] {
			mutate { split => ["dns_flags_authenticated", ","] }
			mutate { convert => ["dns_flags_authenticated", "integer"]}
		}
		if [dns_flags_authoritative] {
			mutate { split => ["dns_flags_authoritative", ","] }
			mutate { convert => ["dns_flags_authoritative", "integer"]}
		}
		if [dns_flags_checkdisable] {
			mutate { split => ["dns_flags_checkdisable", ","] }
			mutate { convert => ["dns_flags_checkdisable", "integer"]}
		}
		if [dns_flags_opcode] {
			mutate { split => ["dns_flags_opcode", ","] }
			mutate { convert => ["dns_flags_opcode", "integer"]}
		}
		if [dns_flags_rcode] {
			mutate { split => ["dns_flags_rcode", ","] }
			mutate { convert => ["dns_flags_rcode", "integer"]}
		}
		if [dns_flags_recavail] {
			mutate { split => ["dns_flags_recavail", ","] }
			mutate { convert => ["dns_flags_recavail", "integer"]}
		}
		if [dns_flags_recdesired] {
			mutate { split => ["dns_flags_recdesired", ","] }
			mutate { convert => ["dns_flags_recdesired", "integer"]}
		}
		if [dns_flags_response] {
			mutate { split => ["dns_flags_response", ","] }
			mutate { convert => ["dns_flags_response", "integer"]}
		}
		if [dns_flags_truncated] {
			mutate { split => ["dns_flags_truncated", ","] }
			mutate { convert => ["dns_flags_truncated", "integer"]}
		}
		if [dns_flags_z] {
			mutate { split => ["dns_flags_z", ","] }
			mutate { convert => ["dns_flags_z", "integer"]}
		}
		if [dns_id] {
			mutate { split => ["dns_id", ","] }
		}
		if [dns_ns] {
			mutate { split => ["dns_ns", ","] }
		}
		if [dns_ptr_domain_name] {
			mutate { split => ["dns_ptr_domain_name", ","] }
		}
		if [dns_qry_class] {
			mutate { split => ["dns_qry_class", ","] }
		}
		if [dns_qry_name] {
			mutate { split => ["dns_qry_name", ","] }
		}
		if [dns_qry_name_len] {
			mutate { split => ["dns_qry_name_len", ","] }
			mutate { convert => ["dns_qry_name_len", "integer"]}
		}
		if [dns_qry_type] {
			mutate { split => ["dns_qry_type", ","] }
			mutate { convert => ["dns_qry_type", "integer"]}
		}
		if [dns_resp_class] {
			mutate { split => ["dns_resp_class", ","] }
		}
		if [dns_resp_edns0_version] {
			mutate { split => ["dns_resp_edns0_version", ","] }
			mutate { convert => ["dns_resp_edns0_version", "integer"]}
		}
		if [dns_resp_ext_rcode] {
			mutate { split => ["dns_resp_ext_rcode", ","] }
		}
		if [dns_resp_len] {
			mutate { split => ["dns_resp_len", ","] }
			mutate { convert => ["dns_resp_len", "integer"]}
		}
		if [dns_resp_name] {
			mutate { split => ["dns_resp_name", ","] }
		}
		if [dns_resp_ttl] {
			mutate { split => ["dns_resp_ttl", ","] }
			mutate { convert => ["dns_resp_ttl", "integer"]}
		}
		if [dns_resp_type] {
			mutate { split => ["dns_resp_type", ","] }
			mutate { convert => ["dns_resp_type", "integer"]}
		}
		if [dns_resp_z] {
			mutate { split => ["dns_resp_z", ","] }
		}
		if [dns_resp_z_do] {
			mutate { split => ["dns_resp_z_do", ","] }
			mutate { convert => ["dns_resp_z_do", "integer"]}
		}
		if [dns_resp_z_reserved] {
			mutate { split => ["dns_resp_z_reserved", ","] }
		}
		if [dns_response_to] {
			mutate { split => ["dns_response_to", ","] }
			mutate { convert => ["dns_response_to", "integer"]}
		}
		if [dns_rr_udp_payload_size] {
			mutate { split => ["dns_rr_udp_payload_size", ","] }
			mutate { convert => ["dns_rr_udp_payload_size", "integer"]}
		}
		if [dns_rrsig_algorithm] {
			mutate { split => ["dns_rrsig_algorithm", ","] }
			mutate { convert => ["dns_rrsig_algorithm", "integer"]}
		}
		if [dns_rrsig_key_tag] {
			mutate { split => ["dns_rrsig_key_tag", ","]  }
			mutate { convert => ["dns_rrsig_key_tag", "integer"]}
		}
		if [dns_rrsig_labels] {
			mutate { split => ["dns_rrsig_labels", ","] }
			mutate { convert => ["dns_rrsig_labels", "integer"]}
		}
		if [dns_rrsig_original_ttl] {
			mutate { split => ["dns_rrsig_original_ttl", ","] }
			mutate { convert => ["dns_rrsig_original_ttl", "integer"]}
		}
		if [dns_rrsig_signature_expiration] {
			mutate { split => ["dns_rrsig_signature_expiration", ","] }
		}
		if [dns_rrsig_signature_inception] {
			mutate { split => ["dns_rrsig_signature_inception", ","] }
		}
		if [dns_rrsig_signers_name] {
			mutate { split => ["dns_rrsig_signers_name", ","] }
		}
		if [dns_rrsig_type_covered] {
			mutate { split => ["dns_rrsig_type_covered", ","] }
			mutate { convert => ["dns_rrsig_type_covered", "integer"]}
		}
		if [dns_soa_expire_limit] {
			mutate { split => ["dns_soa_expire_limit", ","] }
			mutate { convert => ["dns_soa_expire_limit", "integer"]}
		}
		if [dns_soa_mininum_ttl] {
			mutate { split => ["dns_soa_mininum_ttl", ","] }
			mutate { convert => ["dns_soa_mininum_ttl", "integer"]}
		}
		if [dns_soa_mname] {
			mutate { split => ["dns_soa_mname", ","] }
		}
		if [dns_soa_refresh_interval] {
			mutate { split => ["dns_soa_refresh_interval", ","] }
			mutate { convert => ["dns_soa_refresh_interval", "integer"]}
		}
		if [dns_soa_retry_interval] {
			mutate { split => ["dns_soa_retry_interval", ","] }
			mutate { convert => ["dns_soa_retry_interval", "integer"]}
		}
		if [dns_soa_rname] {
			mutate { split => ["dns_soa_rname", ","] }
		}
		if [dns_soa_serial_number] {
			mutate { split => ["dns_soa_serial_number", ","] }
			mutate { convert => ["dns_soa_serial_number", "integer"]}
		}
		if [dns_time] {
			mutate { split => ["dns_time", ","] }
			mutate { convert => ["dns_time", "float"] }
		}
		
		####################################### Verificacao dos GEOIPs ###############################################
		if !("172.16.20" in [ip_src]) { 
			geoip { source => "ip_src" target => "geoip_ip_src" }
		}
		if !("172.16.20" in [ip_dst]) {
			geoip {	source => "ip_dst" target => "geoip_ip_dst"
			}
		}
		if !("172.16.20" in [dns_a]) {
			geoip {	source => "dns_a"  target => "geoip_dns_a" }
		}
	}
}

output {
	if [topics] == ["ip-udp-dns"]
    {
		file {
			path => "/tmp/testekafka.json"
		}
	   
		elasticsearch {
			hosts => ["localhost:9200"]
			index => "kafka-teste-%{[@metadata][indice]}"
		}
	}
}
